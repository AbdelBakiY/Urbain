package engine.map;

import config.GameConfiguration;

/**
 * Copyright SEDAMOP - Software Engineering
 * 
 * @author tianxiao.liu@cyu.fr
 *
 */
public class Map {
	private Block[][] blocks;
	public static int[][] matrice = {
			{38,63,62,63,38,40,40,41,37,0,0,67,0,0,0,38,37,39,62,40,41,37,40,62,37,40,38,39,41,62,37,38,0,0,0,67,0,0,0,39,38,63,40,39,37,62,41,63,39,38, 39, 41},
			{40,38,52,1,53,53,53,53,54,0,0,67,0,0,0,52,53,2,53,53,53,53,53,53,53,3,53,53,53,53,53,54,0,0,0,67,0,0,74,52,17,53,53,53,53,53,55,37, 63, 63},
			{63,39,55,60,60,60,60,60,70,0,0,0,0,0,74,55,60,60,60,60,60,60,83,84,85,60,60,60,60,60,60,61,0,0,0,0,0,0,0,55,55,60,60,60,60,55,55,40, 63, 63},
			{41,37,55,60,60,60,60,60,61,66,66,66,66,66,66,55,60,60,60,60,60,60,95,94,86,60,60,60,60,60,60,61,66,66,66,66,66,66,66,55,55,60,60,60,60,55,55,38, 39, 63},
			{37,63,55,60,60,60,60,60,61,66,66,66,66,66,66,55,60,60,60,60,60,60,92,93,86,60,60,60,60,60,60,68,66,66,66,66,66,66,66,55,55,60,60,60,60,55,55,38, 63, 37},
			{63,40,55,69,60,60,60,60,68,66,66,66,66,66,66,55,60,69,60,60,60,60,89,98,87,60,60,60,60,69,60,61,66,66,66,66,66,66,66,55,55,60,60,60,60,55,55,62, 39, 38},
			{40,38,59,57,57,57,57,57,58,0,0,0,0,0,0,59,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,0,0,0,0,0,0,74,55,55,60,60,60,60,55,55,62, 37, 38},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,55,55,60,60,60,60,55,55,62, 37, 39},
			{65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,67,0,0,0,55,18,60,60,60,60,55,55,41, 38, 38},
			{0,0,0,71,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,55,55,60,60,60,60,55,55,62, 37, 62},
			{41,40,52,4,53,53,53,53,53,53,54,0,0,0,0,0,0,0,43,44,44,44,44,44,44,44,44,44,44,44,44,44,46,0,0,67,0,0,74,55,55,60,60,60,60,55,55,37, 39, 41},
			{63,63,55,60,60,60,60,60,60,60,70,0,0,0,0,0,0,0,51,39,21,22,23,24,25,41,41,40,41,10,38,10,47,0,0,0,0,0,0,55,55,60,60,60,60,55,55,39, 40, 40},
			{63,37,55,60,60,60,60,60,60,60,61,66,66,66,66,66,66,66,51,38,26,11,11,11,36,38,10,41,39,10,10,38,47,66,66,66,66,66,66,55,55,60,60,60,60,55,55,40, 37, 40},
			{39,40,55,60,60,60,60,60,60,60,61,66,66,66,66,66,66,66,51,37,27,11,11,11,35,41,40,10,37,10,39,40,47,66,66,66,66,66,66,55,55,60,60,60,60,55,55,63, 41, 38},
			{40,38,55,60,60,60,60,60,60,60,61,66,66,66,66,66,66,66,51,41,28,11,11,11,34,39,41,41,41,38,10,10,47,66,66,66,66,66,66,55,55,60,60,60,60,55,55,38, 39, 37},
			{39,62,55,60,60,60,60,60,60,60,68,66,66,66,66,66,66,66,51,40,29,30,31,32,33,10,37,10,10,10,39,41,47,66,66,66,66,66,66,55,19,60,60,60,60,55,55,38, 63, 62},
			{40,63,55,69,60,60,60,69,60,60,61,0,0,0,0,0,0,0,51,42,39,37,41,38,40,42,10,41,40,38,41,37,47,0,0,0,0,0,74,55,55,60,60,60,60,55,55,39, 40, 37},
			{41,63,59,57,57,57,57,57,57,57,58,0,0,0,0,0,0,0,50,49,49,49,49,49,49,49,49,49,49,49,49,49,48,0,0,67,0,0,0,55,55,60,60,60,60,55,55,39, 63, 41},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,55,55,60,60,60,60,55,55,63,37,38},
			{65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,67,0,0,0,55,55,60,60,60,60,55,55,39, 41, 41},
			{0,0,0,71,0,0,0,71,0,0,0,71,0,0,0,71,0,0,0,0,0,0,0,0,0,71,0,0,0,0,71,0,0,0,0,67,0,0,0,55,55,60,60,60,60,55,55,41, 62, 39},
			{41,63,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,0,0,67,0,0,52,53,7,53,53,53,53,53,54,0,0,67,0,0,74,55,55,60,60,60,60,55,55,62, 39, 41},
			{40,62,55,5,60,60,60,60,83,84,84,84,85,6,60,60,60,60,68,0,0,0,0,74,55,60,60,60,60,60,60,60,68,0,0,67,0,0,0,55,55,60,60,60,60,55,55,41, 63, 38},
			{38,62,55,60,60,60,60,60,92,93,96,95,86,60,60,60,60,60,61,66,66,66,66,66,55,60,60,60,60,60,60,60,61,0,0,0,0,0,0,55,20,60,60,60,60,55,55,62, 41, 40},
			{38,37,55,60,60,60,60,60,95,94,96,91,86,60,60,60,60,60,61,66,66,66,66,66,55,60,60,60,60,60,60,60,61,66,66,66,66,66,66,55,55,60,60,60,60,55,55,39, 38, 38},
			{63,41,55,60,60,60,60,60,92,96,93,94,86,60,60,60,60,60,70,66,66,66,66,66,55,60,60,60,60,60,60,60,70,66,66,66,66,66,66,55,55,60,60,60,60,55,55,38, 40, 39},
			{41,37,55,60,60,60,60,60,95,94,95,96,86,60,60,60,60,60,61,66,66,66,66,66,55,60,60,60,60,60,60,60,61,66,66,66,66,66,66,55,55,60,60,60,60,55,55,38, 37, 40},
			{40,39,55,60,60,60,60,60,89,88,88,88,87,60,60,60,60,60,61,0,0,0,0,0,55,60,60,60,60,60,60,60,61,0,0,0,0,0,74,55,55,60,60,60,60,55,55,62, 40, 63},
			{40,63,59,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,0,0,67,0,0,59,57,57,57,57,57,57,57,58,0,0,67,0,0,0,55,59,57,57,57,57,58,55,37, 39, 38},
			{37,41,37,39,40,37,40,39,41,39,37,38,63,39,40,41,39,37,38,0,0,67,0,0,37,39,40,38,37,40,41,62,63,0,0,67,0,0,0,38,63,40,39,37,63,37,40,41,62,63,39,63},

			

	};
	
	public int[][] getMatrice() {
		return matrice;
	}

	private int lineCount;
	private int columnCount;

	public Map(int lineCount, int columnCount) {
	    this.lineCount = lineCount;
	    this.columnCount = columnCount;

	    blocks = new Block[lineCount][columnCount];

	    for (int lineIndex = 0; lineIndex < GameConfiguration.LINE_COUNT; lineIndex++) {
	        for (int columnIndex = 0; columnIndex < GameConfiguration.COLUMN_COUNT; columnIndex++) {
	            int type = matrice[lineIndex][columnIndex];
	            blocks[lineIndex][columnIndex] = new Block(lineIndex, columnIndex, type);
	        }
	    }
	}

	public Block[][] getBlocks() {
		return blocks;
	}

	public int getLineCount() {
		return lineCount;
	}

	public int getColumnCount() {
		return columnCount;
	}

	public Block getBlock(int line, int column) {
		return blocks[line][column];
	}

	public boolean isOnTop(Block block) {
		int line = block.getLine();
		return line == 0;
	}

	public boolean isOnBottom(Block block) {
		int line = block.getLine();
		return line == lineCount - 1;
	}

	public boolean isOnLeftBorder(Block block) {
		int column = block.getColumn();
		return column == 0;
	}

	public boolean isOnRightBorder(Block block) {
		int column = block.getColumn();
		return column == columnCount - 1;
	}

	public boolean isOnBorder(Block block) {
		return isOnTop(block) || isOnBottom(block) || isOnLeftBorder(block) || isOnRightBorder(block);
	}

}
